{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for fade-out.api:\nThis is a animation api.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `duration`: The duration of the animation. (`number`)\n- `by`: The timing function. (`(t: number) => number`) [t => t]\n\n\nDocumentation for rect.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `width`: The width of the rectangle. (`number`)\n- `height`: The height of the rectangle. (`number`)\n- `radius`: The radius of the rectangle's four summits. (`number`)"}, {"role": "user", "content": "How to use the `fadeOut` animation api?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer, useWidget } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Rect, fadeOut } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play, useAnimation } = usePlayer()\nconst rect = useWidget('rect')\n\nonMounted(() => {\n  useAnimation(rect)\n    .animate(fadeOut, {\n      duration: 1,\n    })\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Rect :width=\"200\" :height=\"200\" wid=\"rect\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for line.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `from`: The start point of the line. (`[number, number]`)\n- `to`: The end point of the line. (`[number, number]`)"}, {"role": "user", "content": "How to use the component `<Line>`?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Line } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play } = usePlayer()\n\nonMounted(() => {\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Line :from=\"[0, 0]\" :to=\"[100, 300]\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for text.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]- `font_family`: The font family of the text. (`string`) [\"\"]\n- `font-size`: The font size of the text. (`'xx-small' | 'x-small' | 'small' | 'medium' | 'large' | 'x-large' | 'xx-large' | 'xxx-large' | 'larger' | 'smaller' | string | number`) [\"\"]\n- `font-weight`: The weight of the font. (`number | 'normal' | 'bold' | 'bolder' | 'lighter'`) ['normal']\n- `font-style`: The style of the font. (`'normal' | 'italic' | 'oblique'`) ['normal']\n- `align`: The horizontal alignment of the text. (`'start' | 'middle' | 'end'`) ['start']\n- `baseline`: The vertical alignment of the text. (`'top' | 'middle' | 'bottom'`) ['middle']\n- `decoration`: The decoration applied to the text. (`'none' | 'underline' | 'overline' | 'line-through' | 'blink'`) ['none']\n- `word-spacing`: The space between words. (`number`) [0]\n- `letter-spacing`: The space between letters. (`number`) [0]"}, {"role": "user", "content": "How to use the component `<Text>`?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Text } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play } = usePlayer()\n\nonMounted(() => {\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Text :width=\"200\" :height=\"200\">Hello world!</Text>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for webview.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `width`: The width of the rectangle. (`number`)\n- `height`: The height of the rectangle. (`number`)"}, {"role": "user", "content": "How to use the component `<Webview>`?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Webview } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play } = usePlayer()\n\nonMounted(() => {\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Webview :width=\"800\" :height=\"450\">\n      <h1>Hello world!</h1>\n      <button>Click me!</button>\n    </Webview>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for rotate.api:\nThis is a animation api.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `duration`: The duration of the animation. (`number`)\n- `by`: The timing function. (`(t: number) => number`) [t => t]\n- `offset`: The offset angle. (`number`)\n\nDocumentation for rect.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `width`: The width of the rectangle. (`number`)\n- `height`: The height of the rectangle. (`number`)\n- `radius`: The radius of the rectangle's four summits. (`number`)"}, {"role": "user", "content": "How to use animation `rotate` to animate a rectangle?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer, useWidget } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Rect, rotate } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play, useAnimation } = usePlayer()\nconst rect = useWidget('rect')\n\nonMounted(() => {\n  useAnimation(rect)\n    .animate(rotate, {\n      duration: 1, // Use 1 second.\n      offset: 90,\n    })\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Rect :width=\"200\" :height=\"200\" wid=\"rect\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for stroke.api:\nThis is a animation api.\n\nThe type is in parentheses, and the default value is in square brackets.\n\nThis animation will gradually change the stroke of the element.\n\n- `duration`: The duration of the animation. (`number`)\n- `by`: The timing function. (`(t: number) => number`) [t => t]\n\n\nDocumentation for rect.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `width`: The width of the rectangle. (`number`)\n- `height`: The height of the rectangle. (`number`)\n- `radius`: The radius of the rectangle's four summits. (`number`)"}, {"role": "user", "content": "How to use the `stroke` animation api?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer, useWidget } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Rect, stroke } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play, useAnimation } = usePlayer()\nconst rect = useWidget('rect')\n\nonMounted(() => {\n  useAnimation(rect).animate(stroke, {\n    duration: 1\n  })\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Rect :width=\"200\" :height=\"200\" wid=\"rect\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for image.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `width`: The width of the rectangle. (`number`)\n- `height`: The height of the rectangle. (`number`)\n- `href`: The url of image. (`string`)"}, {"role": "user", "content": "How to use the component `<Image>`?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Image } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play } = usePlayer()\n\nonMounted(() => {\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Image href=\"xxx\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for number-axis.api:\nThis is a widget api.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `fn`: Mathematical function. (`(x: number) => number`)\n- `domain`: The domain of the function, that is, the range of x. (`[number, number]`)\n- `ranges`: An optional y range that controls the upper and lower limits of the drawing. (`[number, number]`) [[0,0]]\n- `division-x`: Calculate the X-axis step size. (`number`) [100]\n- `division-y`: Calculate the Y-axis step size. (`number`) [100]\n- `color`: Control the color of the graphics. (`string`) ['white']\n- `width`: Control the line width of the graph. (`number`) \n- `fill-color`: Controls the fill color of the graph. (`string`) [\"none\"]"}, {"role": "user", "content": "How to use the component `<NumberAxis>`?"}, {"role": "assistant", "content": "<template>\n  <NumberAxis\n    :baseUnit=\"'number'\"\n    :domain=\"[0, 10]\"\n    :interval=\"10\"\n    wid=\"axis\"\n  />\n</template>\n\n<script setup lang=\"ts\">\n  import { NumberAxis } from '@vue-motion/extension-math'; // import the component\n  import { usePlayer, useWidget } from '@vue-motion/core';\n  import { move } from '@vue-motion/lib';\n  import { onMounted } from 'vue';\n  //  Get the widget instance from the `useWidget` hook by the `wid`.\n  const axis = useWidget('axis');\n  //  use the hook to get the player instance.\n  const player = usePlayer();\n  onMounted(() => {\n    //  Add `move` animation to the widget.\n    player.useAnimation(axis).delay(1).animate(move, {\n      offsetX: 1,\n      offsetY: 500,\n      duration: 3, // duration 3 second\n    });\n    // begin the animation\n    player.play();\n  });\n</script>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for polar-plane.api:\nThis is a widget api.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `radius`: The radius of the polar coordinate system. (`[number, number]`)\n- `interval`: Angular intervals, used to draw arcs.. (`number`) [100]\n- `trend`: Trend function to calculate the Angle trend function. (`(count: number) => string`) [(count) => count.toString()]\n- `azimuth-units`: Angular unit. (`'PI radians' | 'TAU radians' | 'degrees' | 'gradians'`) \n- `divide`: Controls how many parts of the polar coordinate plane are divided. (`number`) [20]\n- `font-size`: Font size. (`number`) \n- `font-color`: Font color. (`string`) ['white']"}, {"role": "user", "content": "How to use the component `<PolarPlane>`?"}, {"role": "assistant", "content": "<template>\n  <!-- \nSupport parameters are as follows\nradius     Sets the radius of the polar coordinate system, determining the size of the coordinate system.\ndivide     Divides the circle into specified parts, affecting the number and spacing of radial lines.\ninterval   Sets the interval for each circular arc, determining the number and distribution of arcs.\nazimuthUnits  Sets the unit for the azimuth, supporting degrees, radians, or other units.\nfontSize   Sets the font size of the angle labels, affecting the appearance of the labels.\ntrend      Allows for custom formatting of angle labels by passing a function to control the content of each angle's label.\n-->\n  <PolarPlane\n    :radius=\"150\"\n    :divide=\"8\"\n    :interval=\"45\"\n    :azimuthUnits=\"'degrees'\"\n    :fontSize=\"20\"\n    :trend=\"(count:number) => `${count}`\"\n  />\n</template>\n\n<script setup lang=\"ts\">\n  import { PolarPlane } from '@vue-motion/extension-math';\n</script>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for tex.api:\nThis is a widget api.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `katex-options`: Configuration options to pass to katex rendering. (`katex.KatexOptions`)\n- `auto-center`: Whether the formula is automatically centered to render. (`boolean`)"}, {"role": "user", "content": "How to use the component `<Tex>`?"}, {"role": "assistant", "content": "<template>\n  <!-- Render LaTeX mathematical formulas with katex and embed them in SVG -->\n  <Tex :autoCenter=\"true\">\n    {{ formula }}\n  </Tex>\n</template>\n\n<script setup>\n  import { Tex } from '@vue-motion/extension-math';\n  import { ref } from 'vue';\n  //LaTeX mathematical formulas\n  const formula = ref('\\\\int_0^\\\\infty e^{-x^2} dx');\n</script>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for destory.api:\nThis is a animation api.\n\nThe type is in parentheses, and the default value is in square brackets.\n\nThis animation will gradually destroy the element.\n\n- `duration`: The duration of the animation. (`number`)\n- `by`: The timing function. (`(t: number) => number`) [t => t]\n\n\nDocumentation for rect.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `width`: The width of the rectangle. (`number`)\n- `height`: The height of the rectangle. (`number`)\n- `radius`: The radius of the rectangle's four summits. (`number`)"}, {"role": "user", "content": ""}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer, useWidget } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Rect, destory } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play, useAnimation } = usePlayer()\nconst rect = useWidget('rect')\n\nonMounted(() => {\n  useAnimation(rect)\n    .animate(destory, {\n      duration: 1, // Use 1 second.\n    })\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Rect :width=\"200\" :height=\"200\" wid=\"rect\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for grow.api:\nThis is a animation api.\n\nThe type is in parentheses, and the default value is in square brackets.\n\nThis animation will gradually create the element from 0 to 1.\n\n- `duration`: The duration of the animation. (`number`)\n- `by`: The timing function. (`(t: number) => number`) [t => t]\n\nDocumentation for rect.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `width`: The width of the rectangle. (`number`)\n- `height`: The height of the rectangle. (`number`)\n- `radius`: The radius of the rectangle's four summits. (`number`)"}, {"role": "user", "content": "How to use the `grow` animation api?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer, useWidget } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Rect, grow } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play, useAnimation } = usePlayer()\nconst rect = useWidget('rect')\n\nonMounted(() => {\n  useAnimation(rect).animate(grow)\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Rect :width=\"200\" :height=\"200\" wid=\"rect\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for fade-to.api:\nThis is a animation api.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `duration`: The duration of the animation. (`number`)\n- `by`: The timing function. (`(t: number) => number`) [t => t]\n- `from`: The start opacity. (`number`)\n- `to`: The end opacity. (`number`)\n\n\nDocumentation for rect.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `width`: The width of the rectangle. (`number`)\n- `height`: The height of the rectangle. (`number`)\n- `radius`: The radius of the rectangle's four summits. (`number`)"}, {"role": "user", "content": "How to use the `fadeTo` animation api?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer, useWidget } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Rect, fadeTo } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play, useAnimation } = usePlayer()\nconst rect = useWidget('rect')\n\nonMounted(() => {\n  useAnimation(rect)\n    .animate(fadeTo, {\n      duration: 1,\n      from: 0,\n      to: 1,\n    })\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Rect :width=\"200\" :height=\"200\" wid=\"rect\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for move.api:\nThis is a animation api.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `duration`: The duration of the animation. (`number`)\n- `by`: The timing function. (`(t: number) => number`) [t => t]\n- `offsetX`: The offset on x-coordinate. (`number`)\n- `offsetY`: The offset on y-coordinate. (`number`)\n\n\nDocumentation for rect.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `width`: The width of the rectangle. (`number`)\n- `height`: The height of the rectangle. (`number`)\n- `radius`: The radius of the rectangle's four summits. (`number`)"}, {"role": "user", "content": "How to use animation `move` to animate a rectangle?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer, useWidget } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Rect, move } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play, useAnimation } = usePlayer()\nconst rect = useWidget('rect')\n\nonMounted(() => {\n  useAnimation(rect)\n    .animate(move, {\n      duration: 1, // Use 1 second.\n      offsetX: 200,\n      offsetY: 300,\n    })\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Rect :width=\"200\" :height=\"200\" wid=\"rect\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for arc.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `radius`: The radius of the circle. (`number`)"}, {"role": "user", "content": "How to use the component `<Arc>`?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Arc } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play } = usePlayer()\n\nonMounted(() => {\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Arc :radius=\"100\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for polygon.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `font_family`: The font family of the text. (`string`) [\"\"]\n- `points`: The points composing the polygon. (`Array<[number, number]>`)"}, {"role": "user", "content": "How to use the component `<Polygon>`?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Polygon } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play } = usePlayer()\n\nonMounted(() => {\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Polygon :points=\"[\n      [0, 0],\n      [100, 100],\n      [200, 300]\n    ]\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for math-function.api:\nThis is a widget api.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `base-unit`: The unit of a coordinate axis. (`'number' | 'radian' | 'degree'`)\n- `interval`: Spacing of axes. (`number`) [100]\n- `trend`: Trend function to customize the text of the tag. (`(count: number) => string`) [(count) => count.toString()]\n- `font-size`: Font size. (`number`) \n- `font-color`: Font color. (`string`) ['white']\n- `domain`: Axis range. (`[number, number]`)\n- `tip`: Arrow color. (`string`) [\"white\"]\n- `trim`: Arrow border color . (`string`) [\"white\"]"}, {"role": "user", "content": "How to use the component `<MathFunction>`?"}, {"role": "assistant", "content": "<template>\n  <MathFunction\n    :fn=\"sinFunction\"\n    :domain=\"[0, 100]\"\n    wid=\"sin\"\n    :divisionX=\"5\"\n    :width=\"2\"\n  />\n</template>\n\n<script setup lang=\"ts\">\n  import { MathFunction } from '@vue-motion/extension-math'; // 引入组件\n  import { usePlayer, useWidget } from '@vue-motion/core';\n  import { stroke } from '@vue-motion/lib';\n  import { onMounted } from 'vue';\n  //  Get the widget instance from the `useWidget` hook by the `wid`.\n  const sin = useWidget('sin');\n  //  use the hook to get the player instance.\n  const player = usePlayer();\n  onMounted(() => {\n    //  Add `move` animation to the widget.\n    player.useAnimation(sin).delay(1).animate(stroke, {\n      offsetX: 1,\n      offsetY: 500,\n      duration: 3, // duration 3 second\n    });\n    // begin the animation\n    player.play();\n  });\n  // Define the mathematical function\n  const sinFunction = (x: number) => Math.sin(x);\n</script>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for text-unit.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]- `font_family`: The font family of the text. (`string`) [\"\"]\n- `font-size`: The font size of the text. (`'xx-small' | 'x-small' | 'small' | 'medium' | 'large' | 'x-large' | 'xx-large' | 'xxx-large' | 'larger' | 'smaller' | string | number`) [\"\"]\n- `font-weight`: The weight of the font. (`number | 'normal' | 'bold' | 'bolder' | 'lighter'`) ['normal']\n- `font-style`: The style of the font. (`'normal' | 'italic' | 'oblique'`) ['normal']\n- `align`: The horizontal alignment of the text. (`'start' | 'middle' | 'end'`) ['start']\n- `baseline`: The vertical alignment of the text. (`'top' | 'middle' | 'bottom'`) ['middle']\n- `decoration`: The decoration applied to the text. (`'none' | 'underline' | 'overline' | 'line-through' | 'blink'`) ['none']\n- `word-spacing`: The space between words. (`number`) [0]\n- `letter-spacing`: The space between letters. (`number`) [0]"}, {"role": "user", "content": "How to use the component `<TextUnit>`?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Text, TextUnit } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play } = usePlayer()\n\nonMounted(() => {\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Text :width=\"200\" :height=\"200\">\n      <TextUnit fill-color=\"red\">Hello, </TextUnit>\n      <TextUnit fill-color=\"skyblue\">World!</TextUnit>\n    </Text>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for plane.api:\nThis is a numberPlane api.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `domainX`: X axis range. (`[number, number]`)\n- `domainY`: Y axis range. (`[number, number]`)\n- `intervalX`: X axis interval. (`number`) [100]\n- `intervalY`: Y axis interval. (`number`) [100]\n- `trendX`: X axis label trend function. (`(count: number) => string`) [(count) => count.toString()]\n- `trendY`: Y axis label trend function. (`(count: number) => string`) [(count) => count.toString()]\n- `fontColorX`: X axis font color. (`string`) [\"white\"]\n- `fontColorY`: Y axis font color. (`string`) [\"white\"]\n- `fontSizeX`: X axis font size. (`number`) \n- `fontSizeY`: Y axis font size. (`number`) \n- `grid`: Show grid. (`boolean`) [false]\n- `gridColor`: Grid color. (`string`) [\"white\"]\n- `gridWidth`: Grid line width. (`number`) [1]\n- `tipX`: X axis arrow color. (`string`) [\"white\"]\n- `tipY`: Y axis arrow color. (`string`) [\"white\"]\n- `baseUnit`: Y axis arrow color. (`string`) [\"white\"]\n- `Yrotation`: Control the rotation Angle of Y-axis text. (`number` ranges [0, 360]) [90]\n- `baseUnit`: The unit of a coordinate axis. (`'number' | 'radian' | 'degree'`)"}, {"role": "user", "content": "How to use the component `<NumberPlane>`?"}, {"role": "assistant", "content": "<template>\n  <NumberPlane\n    :domainX=\"[-30, 30]\"\n    :domainY=\"[-30, 30]\"\n    :grid=\"false\"\n  />\n</template>\n\n<script setup lang=\"ts\">\n  import { NumberPlane } from '@vue-motion/extension-math';\n</script>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for rect.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `width`: The width of the rectangle. (`number`)\n- `height`: The height of the rectangle. (`number`)\n- `radius`: The radius of the rectangle's four summits. (`number`)"}, {"role": "user", "content": "How to use the component `<Rect>`?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Rect } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play } = usePlayer()\n\nonMounted(() => {\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Rect :width=\"200\" :height=\"200\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for group.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]"}, {"role": "user", "content": "How to use the component `<Group>`?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Group } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play } = usePlayer()\n\nonMounted(() => {\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Group :x=\"-200\">\n      <Rect :width=\"200\" :height=\"200\"/>\n      <Rect :width=\"100\" :height=\"300\"/>\n      <Rect :width=\"600\" :height=\"500\"/>\n    </Group>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for move-to.api:\nThis is a animation api.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `duration`: The duration of the animation. (`number`)\n- `by`: The timing function. (`(t: number) => number`) [t => t]\n- `fromX`: The start x-coordinate. (`number`)\n- `fromY`: The start y-coordinate. (`number`)\n- `toX`: The end x-coordinate. (`number`)\n- `toY`: The end y-coordinate. (`number`)\n\n\nDocumentation for rect.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `width`: The width of the rectangle. (`number`)\n- `height`: The height of the rectangle. (`number`)\n- `radius`: The radius of the rectangle's four summits. (`number`)"}, {"role": "user", "content": "How to use the `moveTo` animation api?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer, useWidget } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Rect, moveTo } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play, useAnimation } = usePlayer()\nconst rect = useWidget('rect')\n\nonMounted(() => {\n  useAnimation(rect)\n    .animate(moveTo, {\n      fromX: 100,\n      fromY: 100,\n      toX: 200,\n      toY: 200,\n    })\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Rect :width=\"200\" :height=\"200\" wid=\"rect\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for fade-in.api:\nThis is a animation api.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `duration`: The duration of the animation. (`number`)\n- `by`: The timing function. (`(t: number) => number`) [t => t]\n\n\nDocumentation for rect.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `width`: The width of the rectangle. (`number`)\n- `height`: The height of the rectangle. (`number`)\n- `radius`: The radius of the rectangle's four summits. (`number`)"}, {"role": "user", "content": "How to use the `fadeIn` animation api?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer, useWidget } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Rect, fadeIn } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play, useAnimation } = usePlayer()\nconst rect = useWidget('rect')\n\nonMounted(() => {\n  useAnimation(rect)\n    .animate(fadeIn, {\n      duration: 1,\n    })\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Rect :width=\"200\" :height=\"200\" wid=\"rect\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for rotate-to.api:\nThis is a animation api.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `duration`: The duration of the animation. (`number`)\n- `by`: The timing function. (`(t: number) => number`) [t => t]\n- `from`: The start angle. (`number`)\n- `to`: The end angle. (`number`)\n\n\nDocumentation for rect.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `width`: The width of the rectangle. (`number`)\n- `height`: The height of the rectangle. (`number`)\n- `radius`: The radius of the rectangle's four summits. (`number`)"}, {"role": "user", "content": "How to use the `rotateTo` animation api?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer, useWidget } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Rect, rotateTo } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play, useAnimation } = usePlayer()\nconst rect = useWidget('rect')\n\nonMounted(() => {\n  useAnimation(rect)\n    .animate(rotateTo, {\n      from: 0,\n      to: 90,\n    })\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Rect :width=\"200\" :height=\"200\" wid=\"rect\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for scale.api:\nThis is a animation api.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `duration`: The duration of the animation. (`number`)\n- `by`: The timing function. (`(t: number) => number`) [t => t]\n- `offsetX`: The scale value on x-coordinate. (`number`)\n- `offsetY`: The scale value on y-coordinate. (`number`)\n\nDocumentation for rect.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `width`: The width of the rectangle. (`number`)\n- `height`: The height of the rectangle. (`number`)\n- `radius`: The radius of the rectangle's four summits. (`number`)"}, {"role": "user", "content": "How to use animation `scale` to animate a rectangle?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer, useWidget } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Rect, move } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play, useAnimation } = usePlayer()\nconst rect = useWidget('rect')\n\nonMounted(() => {\n  // Scale to 4x in 1 second.\n  useAnimation(rect)\n    .animate(scale, {\n      duration: 1, // Use 1 second.\n      offsetX: 4,\n      offsetY: 4,\n    })\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Rect :width=\"200\" :height=\"200\" wid=\"rect\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for scale-to.api:\nThis is a animation api.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `duration`: The duration of the animation. (`number`)\n- `by`: The timing function. (`(t: number) => number`) [t => t]\n- `fromX`: The start scale on x-coordinate. (`number`)\n- `fromY`: The start scale on y-coordinate. (`number`)\n- `toX`: The end scale on x-coordinate. (`number`)\n- `toY`: The end scale on y-coordinate. (`number`)\n\n\nDocumentation for rect.api:\nThis is a widget.\n\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `width`: The width of the rectangle. (`number`)\n- `height`: The height of the rectangle. (`number`)\n- `radius`: The radius of the rectangle's four summits. (`number`)"}, {"role": "user", "content": "How to use the `scaleTo` animation api?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer, useWidget } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Rect, scaleTo } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play, useAnimation } = usePlayer()\nconst rect = useWidget('rect')\n\nonMounted(() => {\n  useAnimation(rect)\n    .animate(scaleTo, {\n      fromX: 1,\n      fromY: 1,\n      toX: 2,\n      toY: 2,\n    })\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Rect :width=\"200\" :height=\"200\" wid=\"rect\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task."}, {"role": "user", "content": "What is VueMotion?"}, {"role": "assistant", "content": "VueMotion is a front-end animation engine focus on mathematics animation mading, it's based on VueJS and you can use VueJS codes to complete the task of animation making."}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task."}, {"role": "user", "content": "How to exec animations in order?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer, useWidget } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Rect, move, rotate } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play, useAnimation } = usePlayer()\nconst rect = useWidget('rect')\n\nonMounted(() => {\n  // First, move the rectangle to (200, 300), and then rotate it 90 degrees.\n  useAnimation(rect)\n    .animate(move, {\n      duration: 1, // Use 1 second.\n      offsetX: 200,\n      offsetY: 300,\n    })\n    .animate(rotate, {\n      duration: 1,\n      offset: 90,\n    })\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Rect :width=\"200\" :height=\"200\" wid=\"rect\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task."}, {"role": "user", "content": "What does the basic code of VueMotion look like?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer, useWidget } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Rect, move } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\n// 1. use the hook to get the two key methods.\nconst { play, useAnimation } = usePlayer()\n\n// 2. Get the widget instance from the `useWidget` hook by the `wid`.\nconst rect1 = useWidget('rect1')\n\nonMounted(() => {\n  // 5. use `useAnimation` to get a animation manager from the get widget instance.\n  useAnimation(rect1)\n    .animate(move, { duration: 1, offsetX: 100, offsetY: 100 }) // 6. Add `move` animation to the widget.\n    .delay(3) // 7. delay 3 seconds.\n    .exec(() => {\n      console.log('animation end') // 8. output\n    })\n  // 9. After mounted, call `play` method to begin the animation.\n  play()\n})\n</script>\n\n<template>\n  <!-- 3. Set the animation root of component `<Motion>`, set his width and height -->\n  <Motion :width=\"1600\" :height=\"900\">\n    <!-- 4. Add a basic widget in animation, and set his wid (Widget ID) -->\n    <Rect :width=\"200\" :height=\"200\" wid=\"rect1\" />\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task."}, {"role": "user", "content": "As we all know, VueMotion provides a lot of timing functions, and we can use them to create animations.\n\nSo, how to use them? And how to sort them?"}, {"role": "assistant", "content": "These timing functions are used to create animation effects by describing the acceleration and deceleration of animations through different mathematical formulas. Here's a natural language description of these timing functions:\n\n1. **easeInSine, easeOutSine, easeInOutSine**: \n   - These functions use a sine function to smoothly start and end animations. `easeInSine` starts slowly and then accelerates; `easeOutSine` decelerates towards the end; `easeInOutSine` accelerates in the middle, with slow start and end.\n\n2. **easeInQuad, easeOutQuad, easeInOutQuad**:\n   - These functions use a quadratic equation to describe animations. `easeInQuad` starts slowly and then accelerates; `easeOutQuad` decelerates towards the end; `easeInOutQuad` accelerates in the middle, with slow start and end.\n\n3. **easeInCubic, easeOutCubic, easeInOutCubic**:\n   - These functions use a cubic equation to describe animations. `easeInCubic` starts slowly and then accelerates; `easeOutCubic` decelerates towards the end; `easeInOutCubic` accelerates in the middle, with slow start and end.\n\n4. **easeInQuart, easeOutQuart, easeInOutQuart**:\n   - These functions use a quartic equation to describe animations. `easeInQuart` starts slowly and then accelerates; `easeOutQuart` decelerates towards the end; `easeInOutQuart` accelerates in the middle, with slow start and end.\n\n5. **easeInQuint, easeOutQuint, easeInOutQuint**:\n   - These functions use a quintic equation to describe animations. `easeInQuint` starts slowly and then accelerates; `easeOutQuint` decelerates towards the end; `easeInOutQuint` accelerates in the middle, with slow start and end.\n\n6. **easeInExpo, easeOutExpo, easeInOutExpo**:\n   - These functions use an exponential function to describe animations. `easeInExpo` starts very slowly and then accelerates rapidly; `easeOutExpo` decelerates rapidly towards the end; `easeInOutExpo` accelerates in the middle, with slow start and end.\n\n7. **easeInCirc, easeOutCirc, easeInOutCirc**:\n   - These functions use a circular function to describe animations. `easeInCirc` starts slowly and then accelerates; `easeOutCirc` decelerates towards the end; `easeInOutCirc` accelerates in the middle, with slow start and end.\n\n8. **easeInBack, easeOutBack, easeInOutBack**:\n   - These functions slightly overshoot the boundary at the start or end, then return to the target position. `easeInBack` starts slowly and then accelerates; `easeOutBack` decelerates towards the end; `easeInOutBack` accelerates in the middle, with slow start and end.\n\n9. **easeInElastic, easeOutElastic, easeInOutElastic**:\n   - These functions simulate elastic motion, with a bouncing effect at the start or end. `easeInElastic` starts slowly and then accelerates; `easeOutElastic` decelerates towards the end; `easeInOutElastic` accelerates in the middle, with slow start and end.\n\n10. **easeBounce**:\n    - This function simulates a bouncing effect, with several rebounds towards the end of the animation.\n\nThese timing functions help create more natural and smooth animation effects.\n\nIn common usage, we input it as a parameter in `.animate()` method:\n\n```vue\n<script setup>\nimport { usePlayer, useWidget } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Rect, move, easeInOutSine } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play, useAnimation } = usePlayer()\nconst rect = useWidget('rect')\n\nonMounted(() => {\n  useAnimation(rect)\n    .animate(move, {\n      duration: 1, // Use 1 second.\n      offsetX: 200,\n      offsetY: 300,\n      by: easeInOutSine,\n    })\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Rect :width=\"200\" :height=\"200\" wid=\"rect\"/>\n  </Motion>\n</template>\n```\n\nYou need to import it first.\n"}]}
