{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for line.api:\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `from`: The start point of the line. (`[number, number]`)\n- `to`: The end point of the line. (`[number, number]`)"}, {"role": "user", "content": "How to use the component `<Line>`?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Line } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play } = usePlayer()\n\nonMounted(() => {\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Line :from=\"[0, 0]\" :to=\"[100, 300]\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for text.api:\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]- `font_family`: The font family of the text. (`string`) [\"\"]\n- `font-size`: The font size of the text. (`'xx-small' | 'x-small' | 'small' | 'medium' | 'large' | 'x-large' | 'xx-large' | 'xxx-large' | 'larger' | 'smaller' | string | number`) [\"\"]\n- `font-weight`: The weight of the font. (`number | 'normal' | 'bold' | 'bolder' | 'lighter'`) ['normal']\n- `font-style`: The style of the font. (`'normal' | 'italic' | 'oblique'`) ['normal']\n- `align`: The horizontal alignment of the text. (`'start' | 'middle' | 'end'`) ['start']\n- `baseline`: The vertical alignment of the text. (`'top' | 'middle' | 'bottom'`) ['middle']\n- `decoration`: The decoration applied to the text. (`'none' | 'underline' | 'overline' | 'line-through' | 'blink'`) ['none']\n- `word-spacing`: The space between words. (`number`) [0]\n- `letter-spacing`: The space between letters. (`number`) [0]"}, {"role": "user", "content": "How to use the component `<Text>`?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Text } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play } = usePlayer()\n\nonMounted(() => {\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Text :width=\"200\" :height=\"200\">Hello world!</Text>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for webview.api:\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `width`: The width of the rectangle. (`number`)\n- `height`: The height of the rectangle. (`number`)"}, {"role": "user", "content": "How to use the component `<Webview>`?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Webview } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play } = usePlayer()\n\nonMounted(() => {\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Webview :width=\"800\" :height=\"450\">\n      <h1>Hello world!</h1>\n      <button>Click me!</button>\n    </Webview>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for image.api:\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `width`: The width of the rectangle. (`number`)\n- `height`: The height of the rectangle. (`number`)\n- `href`: The url of image. (`string`)"}, {"role": "user", "content": "How to use the component `<Image>`?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Image } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play } = usePlayer()\n\nonMounted(() => {\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Image href=\"xxx\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for arc.api:\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `radius`: The radius of the circle. (`number`)"}, {"role": "user", "content": "How to use the component `<Arc>`?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Arc } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play } = usePlayer()\n\nonMounted(() => {\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Arc :radius=\"100\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for polygon.api:\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `font_family`: The font family of the text. (`string`) [\"\"]\n- `points`: The points composing the polygon. (`Array<[number, number]>`)"}, {"role": "user", "content": "How to use the component `<Polygon>`?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Polygon } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play } = usePlayer()\n\nonMounted(() => {\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Polygon :points=\"[\n      [0, 0],\n      [100, 100],\n      [200, 300]\n    ]\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for text-unit.api:\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]- `font_family`: The font family of the text. (`string`) [\"\"]\n- `font-size`: The font size of the text. (`'xx-small' | 'x-small' | 'small' | 'medium' | 'large' | 'x-large' | 'xx-large' | 'xxx-large' | 'larger' | 'smaller' | string | number`) [\"\"]\n- `font-weight`: The weight of the font. (`number | 'normal' | 'bold' | 'bolder' | 'lighter'`) ['normal']\n- `font-style`: The style of the font. (`'normal' | 'italic' | 'oblique'`) ['normal']\n- `align`: The horizontal alignment of the text. (`'start' | 'middle' | 'end'`) ['start']\n- `baseline`: The vertical alignment of the text. (`'top' | 'middle' | 'bottom'`) ['middle']\n- `decoration`: The decoration applied to the text. (`'none' | 'underline' | 'overline' | 'line-through' | 'blink'`) ['none']\n- `word-spacing`: The space between words. (`number`) [0]\n- `letter-spacing`: The space between letters. (`number`) [0]"}, {"role": "user", "content": "How to use the component `<TextUnit>`?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Text, TextUnit } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play } = usePlayer()\n\nonMounted(() => {\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Text :width=\"200\" :height=\"200\">\n      <TextUnit fill-color=\"red\">Hello, </TextUnit>\n      <TextUnit fill-color=\"skyblue\">World!</TextUnit>\n    </Text>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for rect.api:\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]\n- `fill-color`: The fill color. (`string`) [\"rgba(135,206,250,0.5)\"]\n- `border-color`: The stroke color. (`string`) [\"rgba(135,206,250,1)\"]\n- `border-width`: The stroke width. (`number`) [5]\n- `border-offset`: The stroke offset. (`number`) [0]\n- `border-interval`: The dash of border line. (`[number, number]`) [[1, 0]]\n- `width`: The width of the rectangle. (`number`)\n- `height`: The height of the rectangle. (`number`)\n- `radius`: The radius of the rectangle's four summits. (`number`)"}, {"role": "user", "content": "How to use the component `<Rect>`?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Rect } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play } = usePlayer()\n\nonMounted(() => {\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Rect :width=\"200\" :height=\"200\"/>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task.\n\nDocumentation for group.api:\nThe type is in parentheses, and the default value is in square brackets.\n\n- `x`: The position on x-coordinate, the origin is at the center of video. (`number`) [0]\n- `y`: The position on y-coordinate, the origin is at the center of video. (`number`) [0]\n- `scale-x`: The scale value on x-coordinate. (`number`) [1]\n- `scale-y`: The scale value on y-coordinate. (`number`) [1]\n- `rotation`: The rotation angle. (`number` ranges [0, 360]) [0]\n- `opacity`: The opacity value. (`number` ranges [0, 1]) [1]"}, {"role": "user", "content": "How to use the component `<Group>`?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Group } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\nconst { play } = usePlayer()\n\nonMounted(() => {\n  play()\n})\n</script>\n\n<template>\n  <Motion :width=\"1600\" :height=\"900\">\n    <Group :x=\"-200\">\n      <Rect :width=\"200\" :height=\"200\"/>\n      <Rect :width=\"100\" :height=\"300\"/>\n      <Rect :width=\"600\" :height=\"500\"/>\n    </Group>\n  </Motion>\n</template>\n"}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task."}, {"role": "user", "content": "What is VueMotion?"}, {"role": "assistant", "content": "VueMotion is a front-end animation engine focus on mathematics animation mading, it's based on VueJS and you can use VueJS codes to complete the task of animation making."}]}
{"messages": [{"role": "system", "content": "You are a animation engineer and you need to use a animation engine named VueMotion to complete the task."}, {"role": "user", "content": "What does the basic code of VueMotion look like?"}, {"role": "assistant", "content": "<script setup>\nimport { usePlayer, useWidget } from 'https://cdn.jsdelivr.net/npm/@vue-motion/core@latest/dist/index.js'\nimport { Motion, Rect, move } from 'https://cdn.jsdelivr.net/npm/@vue-motion/lib@0.6.0/dist/index.js'\nimport { onMounted } from 'https://cdn.jsdelivr.net/npm/vue@3.5.12/dist/vue.esm-browser.js'\n\n// 1. use the hook to get the two key methods.\nconst { play, useAnimation } = usePlayer()\n\n// 2. Get the widget instance from the `useWidget` hook by the `wid`.\nconst rect1 = useWidget('rect1')\n\nonMounted(() => {\n  // 5. use `useAnimation` to get a animation manager from the get widget instance.\n  useAnimation(rect1)\n    .animate(move, { duration: 1, offsetX: 100, offsetY: 100 }) // 6. Add `move` animation to the widget.\n    .delay(3) // 7. delay 3 seconds.\n    .exec(() => {\n      console.log('animation end') // 8. output\n    })\n  // 9. After mounted, call `play` method to begin the animation.\n  play()\n})\n</script>\n\n<template>\n  <!-- 3. Set the animation root of component `<Motion>`, set his width and height -->\n  <Motion :width=\"1600\" :height=\"900\">\n    <!-- 4. Add a basic widget in animation, and set his wid (Widget ID) -->\n    <Rect :width=\"200\" :height=\"200\" wid=\"rect1\" />\n  </Motion>\n</template>\n"}]}
